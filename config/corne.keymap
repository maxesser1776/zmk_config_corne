/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hm: homerow-mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homehow-mods";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "tap-preferred";
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
        press_pull: press_pull {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Q>;
            label = "PRESS_PULL";
        };

        extrude: extrude {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E>;
            label = "EXTRUDE";
        };

        point_2_rec: point_2_rec {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp R>;
            label = "POINT_2_REC";
        };

        trim: trim {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T>;
            label = "TRIM";
        };

        measure: measure {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I>;
            label = "MEASURE";
        };

        project: project {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp P>;
            label = "PROJECT";
        };

        molock: molock {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "MOLOCK";
        };
    };


    /*****************************************************************************/
                                /* Layers */
/*****************************************************************************/

#define BASE 0                /* Base layer; Colemak-DH */
#define NUMBERS 1           /* Main Numbers (and symbols) layer */
#define NUMBERS_MO 2         /* Momentary control layer for Numbers layer */
#define NUMBERS_TOG 3        /* Locking control layer for Numbers layer */

/* Base layers for limiting Combo scope */
#define BASE_LAYERS BASE REPEAT_OFF ASSIST_OFF PC REPEAT_CONT REPEAT_CONT_SL \
    REPEAT_CONT_OFF REPEAT_OFF_PC REPEAT_END REPEAT_END_PC SENT_CASE_CONT \
    SENT_CASE_END SENT_CASE_END_PC CAP_I_CONT CAP_I_END

/*****************************************************************************/
                            /* Layer Conditions */
/*****************************************************************************/

/* Conditional Layer helper */
#define LAYER_CONDITION(NAME, IF, THEN) \
    NAME { \
        if-layers = <IF>; \
        then-layer = <THEN>; \
    };

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        /* Support for both smart typing assist and repeat key being enabled */
        LAYER_CONDITION(repeat_cont, REPEAT_CONT_SL, REPEAT_CONT)
        LAYER_CONDITION(repeat_cap_i_cont, CAP_I_END, REPEAT_CONT)
        LAYER_CONDITION(repeat_cont_off, REPEAT_OFF REPEAT_CONT, REPEAT_CONT_OFF)

        /* Support for toggling Mac/PC mode */
        LAYER_CONDITION(repeat_off_pc, PC REPEAT_OFF, REPEAT_OFF_PC)
        LAYER_CONDITION(repeat_end_pc, PC REPEAT_END, REPEAT_END_PC)
        LAYER_CONDITION(sent_case_end_pc, PC SENT_CASE_END, SENT_CASE_END_PC)
        LAYER_CONDITION(continue_selection_pc, PC SELECT_CONT, SELECT_CONT_PC)
        LAYER_CONDITION(editing_pc, PC EDITING, EDITING_PC)
        LAYER_CONDITION(media_pc, PC MEDIA, MEDIA_PC)
        LAYER_CONDITION(numbers_pc, PC NUMBERS, NUM_FUNC_PC)
        LAYER_CONDITION(function_pc, PC FUNCTION, NUM_FUNC_PC)

        /* Layer lock feature for Numbers layer */
        LAYER_CONDITION(numbers_mo, NUMBERS_MO, NUMBERS)
        LAYER_CONDITION(numbers_tog, NUMBERS_TOG, NUMBERS)

        /* Layer lock feature for Editing layer */
        LAYER_CONDITION(editing_mo, EDITING_MO, EDITING)
        LAYER_CONDITION(editing_tog, EDITING_TOG, EDITING)

        /* Restrict selection continuation to Editing layer */
        LAYER_CONDITION(continue_selection, EDITING SELECT_CONT_SL, SELECT_CONT)

        /* Hold Media and Function layers for System layer */
        LAYER_CONDITION(system_layer, MEDIA FUNCTION, SYSTEM)
    };
};

    keymap {
        compatible = "zmk,keymap";

        Base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q           &kp W           &kp E         &kp R             &kp T        &kp Y        &kp U              &kp I                  &kp O                 &kp P                &none
&none  &hm LEFT_GUI A  &hm LEFT_ALT S  &hm LCTRL D   &hm LEFT_SHIFT F  &kp G        &kp H        &mt RIGHT_SHIFT J  &hm RCTRL K            &hm RIGHT_ALT L       &mt LESS_THAN COMMA  &none
&none  &kp Z           &kp X           &kp C         &kp V             &kp B        &kp N        &kp M              &mt DOUBLE_QUOTES SQT  &mt GREATER_THAN DOT  &mt QUESTION SLASH   &none
                                       &lt 4 ESCAPE  &lt 5 SPACE       &lt 1 TAB    &lt 4 ENTER  &lt 6 SPACE        &lt 7 BACKSPACE
            >;

            label = "Base";
        };

        Num {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp Q  &kp O  &kp E  &kp R  &kp T         &kp LEFT_BRACKET  &kp N7                   &kp N8               &kp N9                 &kp RIGHT_BRACKET  &none
&none  &kp I  &kp S  &kp D  &kp F  &kp P         &kp SEMICOLON     &hm LEFT_SHIFT NUMBER_4  &hm LEFT_CONTROL N5  &hm LEFT_ALT NUMBER_6  &kp EQUAL          &none
&none  &kp X  &kp C  &kp V  &kp J  &kp H         &kp GRAVE         &kp NUMBER_1             &kp NUMBER_2         &kp NUMBER_3           &molock            &none
                     &kp M  &kp L  &kp DELETE    &kp RET           &kp N0                   &kp PERIOD
            >;

            label = "Num";
        };

        layer_NumbersTog {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;

            label = "layer_NumbersTog";
        };

        layer_NumbersMo {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;

            label = "layer_NumnersMo";
        };

        Sym {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp LEFT_BRACE  &kp AMPERSAND    &kp ASTERISK          &kp LEFT_PARENTHESIS   &kp RIGHT_BRACE         &kp LEFT_BRACE  &kp AMPERSAND    &kp ASTRK    &kp LPAR   &kp RIGHT_BRACE  &none
&none  &kp COLON       &kp DOLLAR       &kp PERCENT           &kp CARET              &kp PLUS                &kp PLUS        &kp DOLLAR       &kp PERCENT  &kp CARET  &kp COLON        &none
&none  &kp TILDE       &kp EXCLAMATION  &kp AT_SIGN           &kp HASH               &kp PIPE                &kp PIPE        &kp EXCLAMATION  &kp AT_SIGN  &kp HASH   &kp TILDE        &none
                                        &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &hm UNDERSCORE MINUS    &kp RET         &kp QUESTION     &kp RALT
            >;

            label = "Sym";
        };

        Nav {
            bindings = <
&trans  &sl 1   &trans  &trans  &trans  &trans    &kp C_AL_CALCULATOR  &kp C_AC_PASTE  &kp C_AC_COPY     &kp C_AC_CUT  &kp C_AC_UNDO  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp CAPS             &kp LEFT        &kp DOWN          &kp UP_ARROW  &kp RIGHT      &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp INS              &kp HOME        &kp PAGE_DOWN     &kp PAGE_UP   &kp END        &trans
                        &trans  &trans  &trans    &trans               &trans          &kp LC(LEFT_GUI)
            >;

            label = "Nav";
        };

        Media {
            bindings = <
&trans  &trans        &trans        &trans        &trans              &trans        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp C_REWIND  &kp C_VOL_UP  &kp C_VOL_DN  &kp C_FAST_FORWARD  &trans        &trans  &none   &none   &none   &none   &trans
&trans  &trans        &trans        &trans        &trans              &trans        &trans  &trans  &trans  &trans  &trans  &trans
                                    &kp C_MUTE    &kp C_PP            &kp C_STOP    &trans  &trans  &trans
            >;

            label = "Media";
        };

        Fun {
            bindings = <
&trans  &kp F12           &kp F7           &kp F8               &kp F9        &kp PRINTSCREEN    &trans  &bootloader   &trans        &trans        &trans        &trans
&trans  &hm LEFT_GUI F11  &hm LEFT_ALT F4  &hm LEFT_CONTROL F5  &hm LSHFT F6  &kp SCROLLLOCK     &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &kp F10           &kp F1           &kp F2               &kp F3        &kp PAUSE_BREAK    &trans  &trans        &trans        &trans        &trans        &bt BT_CLR
                                           &trans               &trans        &trans             &trans  &trans        &trans
            >;

            label = "Fun";
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
